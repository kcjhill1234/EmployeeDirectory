{"version":3,"sources":["components/Header.jsx","use-employees.js","components/Table-Header.jsx","components/Table-Body.jsx","components/DataTable.jsx","components/Employee-Search.jsx","App.jsx","serviceWorker.js","index.js"],"names":["ContentHeader","Menu","inverted","size","color","Item","employeeContext","createContext","ProvideEmployees","children","service","useReducer","employeeReducer","filteredEmployees","employees","loading","column","direction","query","state","dispatch","useEffect","fetch","then","response","json","users","console","log","results","type","actions","LOAD_EMPLOYEES","map","employee","first","name","last","email","phone","location","city","useProvideEmployees","Provider","value","useEmployees","useContext","CHANGE_SORT","SEARCH_CHANGED","FILTERED_EMPLOYEES","action","reverse","sortBy","Error","TableHeader","headers","headerCells","i","display","Table","HeaderCell","key","sorted","onClick","Header","Row","TableBody","rows","data","Cell","Body","DataTable","sortable","striped","EmployeeSearch","Input","focus","onChange","e","searchText","target","filter","join","includes","placeholder","icon","App","className","length","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.9cf80839.chunk.js","sourcesContent":["import React from \"react\";\nimport { Menu } from \"semantic-ui-react\";\n\nconst ContentHeader = () => (\n  <Menu inverted size=\"massive\" color=\"black\">\n    <Menu.Item>Employee Directory</Menu.Item>\n  </Menu>\n);\nexport default ContentHeader;\n","import React, { createContext, useContext, useReducer, useEffect } from 'react'\nimport sortBy from 'lodash.sortby'\n\nconst employeeContext = createContext()\n\nexport function ProvideEmployees({ children }) {\n    const service = useProvideEmployees()\n    return <employeeContext.Provider value={service}>{children}</employeeContext.Provider>\n}\n\nexport const useEmployees = () => {\n    return useContext(employeeContext)\n}\n\nconst actions = {\n    LOAD_EMPLOYEES: 'LOAD_EMPLOYEES',\n    CHANGE_SORT: 'CHANGE_SORT',\n    SEARCH_CHANGED: 'SEARCH_CHANGED',\n    FILTERED_EMPLOYEES: 'FILTERED_EMPLOYEES'\n}\n\nfunction employeeReducer(state, action) {\n    switch (action.type) {\n        case actions.FILTERED_EMPLOYEES:\n            return { ...state, filteredEmployees: action.employees }\n        case actions.SEARCH_CHANGED:\n            return { ...state, query: action.query }\n        case actions.CHANGE_SORT:\n            if (state.column === action.column) {\n                return {\n                    ...state,\n                    filteredEmployees: state.filteredEmployees.reverse(),\n                    direction: state.direction === \"ascending\" ? \"descending\" : \"ascending\"\n                }\n            }\n            return {\n                ...state,\n                column: action.column,\n                filteredEmployees: sortBy(state.filteredEmployees, [action.column]),\n                direction: \"ascending\"\n            }\n        case actions.LOAD_EMPLOYEES:\n            return { ...state, employees: action.employees, filteredEmployees: action.employees }\n        default:\n            throw new Error('Action not implemented')\n    }\n}\n\nfunction useProvideEmployees() {\n    const [state, dispatch] = useReducer(employeeReducer, {\n        filteredEmployees: [],\n        employees: [],\n        loading: false,\n        column: null,\n        direction: null,\n        query: ''\n    })\n\n    useEffect(() => {\n        fetch('https://randomuser.me/api/?results=200&nat=us')\n            .then(response => response.json())\n            .then(users => {\n                console.log(users.results[0])\n                dispatch({\n                    type: actions.LOAD_EMPLOYEES,\n                    employees: users.results.map(employee => ({\n                        first: employee.name.first,\n                        last: employee.name.last,\n                        email: employee.email,\n                        phone: employee.phone,\n                        location: `${employee.location.city}, ${employee.location.state}`\n                    }))\n                })\n            })\n    }, [])\n\n\n    return {\n        state,\n        dispatch,\n        actions\n    }\n\n}","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport { useEmployees } from \"../use-employees\";\n\nexport default function TableHeader({ headers }) {\n  const { dispatch, state, actions } = useEmployees();\n  const { column, direction } = state;\n\n  const headerCells = headers.map(({ display, name }, i) => (\n    <Table.HeaderCell\n      key={i}\n      sorted={column === name ? direction : null}\n      onClick={() => dispatch({ type: actions.CHANGE_SORT, column: name })}\n    >\n      {display}\n    </Table.HeaderCell>\n  ));\n  return (\n    <Table.Header>\n      <Table.Row>{headerCells}</Table.Row>\n    </Table.Header>\n  );\n}\n","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\n\nexport default function TableBody({ data }) {\n  const rows = data.map(({ first, last, email, phone, location }, i) => (\n    <Table.Row key={i}>\n      <Table.Cell>{first}</Table.Cell>\n      <Table.Cell>{last}</Table.Cell>\n      <Table.Cell>{email}</Table.Cell>\n      <Table.Cell>{phone}</Table.Cell>\n      <Table.Cell>{location}</Table.Cell>\n    </Table.Row>\n  ));\n  return <Table.Body>{rows}</Table.Body>;\n}\n","import React from \"react\";\nimport { Table } from \"semantic-ui-react\";\nimport TableHeader from \"./Table-Header\";\nimport TableBody from \"./Table-Body\";\n\nexport default function DataTable({ data, headers }) {\n  return (\n    <Table sortable striped color=\"blue\">\n      <TableHeader headers={headers} />\n      <TableBody data={data} />\n    </Table>\n  );\n}\n","import React from \"react\";\nimport { Input } from \"semantic-ui-react\";\nimport { useEmployees } from \"../use-employees\";\n\nexport default function EmployeeSearch() {\n  const { state, dispatch, actions } = useEmployees();\n  const { query } = state;\n  const handleSearch = (e) => {\n    const searchText = e.target.value;\n    dispatch({ type: actions.SEARCH_CHANGED, query: searchText });\n    const filter = ({ first, last, email, phone, location }) => {\n      const value = [first, last, email, phone, location].join(\"\");\n      return value.includes(searchText);\n    };\n    dispatch({\n      type: actions.FILTERED_EMPLOYEES,\n      employees: state.employees.filter(filter),\n    });\n  };\n  return (\n    <div>\n      <Input\n      size=\"huge\"\n      focus\n        value={query}\n        onChange={handleSearch}\n        placeholder=\"Search...\"\n        icon=\"search\"\n      />\n    </div>\n  );\n}\n","import React from \"react\";\nimport Header from \"./components/Header\";\nimport DataTable from \"./components/DataTable\";\nimport EmployeeSearch from \"./components/Employee-Search\";\nimport { useEmployees } from \"./use-employees\";\n\nfunction App() {\n  const { state } = useEmployees();\n  const { filteredEmployees } = state;\n  const headers = [\n    { display: \"First Name\", name: \"first\" },\n    { display: \"Last Name\", name: \"last\" },\n    { display: \"Email\", name: \"email\" },\n    { display: \"Phone\", name: \"phone\" },\n    { display: \"Location\", name: \"location\" },\n  ];\n  return (\n    <>\n      <Header />\n      <div className=\"App\">\n        <EmployeeSearch />\n        {filteredEmployees.length ? (\n          <DataTable data={filteredEmployees} headers={headers} />\n        ) : (\n          <div>No Data...</div>\n        )}\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'semantic-ui-css/semantic.min.css'\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ProvideEmployees } from './use-employees';\n\nReactDOM.render(<ProvideEmployees><App /></ProvideEmployees>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}